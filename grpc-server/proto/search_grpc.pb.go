// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: search.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloServiceClient interface {
	// 一个简单的rpc
	HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// post form
	PostForm(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// 一个服务器端流式rpc
	HelloWorldServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloWorldServerStreamClient, error)
	// 一个客户端流式rpc
	HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientStreamClient, error)
	// 一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientAndServerStreamClient, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.HelloService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) PostForm(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.HelloService/PostForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) HelloWorldServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloWorldServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloService_ServiceDesc.Streams[0], "/proto.HelloService/HelloWorldServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_HelloWorldServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloService_ServiceDesc.Streams[1], "/proto.HelloService/HelloWorldClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldClientStreamClient{stream}
	return x, nil
}

type HelloService_HelloWorldClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldClientStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientAndServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloService_ServiceDesc.Streams[2], "/proto.HelloService/HelloWorldClientAndServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldClientAndServerStreamClient{stream}
	return x, nil
}

type HelloService_HelloWorldClientAndServerStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldClientAndServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldClientAndServerStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientAndServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
// All implementations must embed UnimplementedHelloServiceServer
// for forward compatibility
type HelloServiceServer interface {
	// 一个简单的rpc
	HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error)
	// post form
	PostForm(context.Context, *HelloRequest) (*HelloResponse, error)
	// 一个服务器端流式rpc
	HelloWorldServerStream(*HelloRequest, HelloService_HelloWorldServerStreamServer) error
	// 一个客户端流式rpc
	HelloWorldClientStream(HelloService_HelloWorldClientStreamServer) error
	// 一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(HelloService_HelloWorldClientAndServerStreamServer) error
	mustEmbedUnimplementedHelloServiceServer()
}

// UnimplementedHelloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (UnimplementedHelloServiceServer) HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedHelloServiceServer) PostForm(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostForm not implemented")
}
func (UnimplementedHelloServiceServer) HelloWorldServerStream(*HelloRequest, HelloService_HelloWorldServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldServerStream not implemented")
}
func (UnimplementedHelloServiceServer) HelloWorldClientStream(HelloService_HelloWorldClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientStream not implemented")
}
func (UnimplementedHelloServiceServer) HelloWorldClientAndServerStream(HelloService_HelloWorldClientAndServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientAndServerStream not implemented")
}
func (UnimplementedHelloServiceServer) mustEmbedUnimplementedHelloServiceServer() {}

// UnsafeHelloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServiceServer will
// result in compilation errors.
type UnsafeHelloServiceServer interface {
	mustEmbedUnimplementedHelloServiceServer()
}

func RegisterHelloServiceServer(s grpc.ServiceRegistrar, srv HelloServiceServer) {
	s.RegisterService(&HelloService_ServiceDesc, srv)
}

func _HelloService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HelloService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).HelloWorld(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_PostForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).PostForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HelloService/PostForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).PostForm(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_HelloWorldServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).HelloWorldServerStream(m, &helloServiceHelloWorldServerStreamServer{stream})
}

type HelloService_HelloWorldServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloServiceHelloWorldServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_HelloWorldClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloWorldClientStream(&helloServiceHelloWorldClientStreamServer{stream})
}

type HelloService_HelloWorldClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloWorldClientStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_HelloWorldClientAndServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloWorldClientAndServerStream(&helloServiceHelloWorldClientAndServerStreamServer{stream})
}

type HelloService_HelloWorldClientAndServerStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloWorldClientAndServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldClientAndServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientAndServerStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloService_ServiceDesc is the grpc.ServiceDesc for HelloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _HelloService_HelloWorld_Handler,
		},
		{
			MethodName: "PostForm",
			Handler:    _HelloService_PostForm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloWorldServerStream",
			Handler:       _HelloService_HelloWorldServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloWorldClientStream",
			Handler:       _HelloService_HelloWorldClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloWorldClientAndServerStream",
			Handler:       _HelloService_HelloWorldClientAndServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "search.proto",
}
