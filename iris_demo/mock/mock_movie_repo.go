// Code generated by MockGen. DO NOT EDIT.
// Source: iris_demo/repo (interfaces: MovieRepository)

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	models "iris_demo/models"
	repo "iris_demo/repo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMovieRepository) Delete(arg0 repo.Query, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMovieRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieRepository)(nil).Delete), arg0, arg1)
}

// Exec mocks base method.
func (m *MockMovieRepository) Exec(arg0, arg1 repo.Query, arg2, arg3 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockMovieRepositoryMockRecorder) Exec(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockMovieRepository)(nil).Exec), arg0, arg1, arg2, arg3)
}

// InsertOrUpdate mocks base method.
func (m *MockMovieRepository) InsertOrUpdate(arg0 models.Movie) (models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdate", arg0)
	ret0, _ := ret[0].(models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrUpdate indicates an expected call of InsertOrUpdate.
func (mr *MockMovieRepositoryMockRecorder) InsertOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdate", reflect.TypeOf((*MockMovieRepository)(nil).InsertOrUpdate), arg0)
}

// Select mocks base method.
func (m *MockMovieRepository) Select(arg0 repo.Query) (models.Movie, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(models.Movie)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockMovieRepositoryMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockMovieRepository)(nil).Select), arg0)
}

// SelectMany mocks base method.
func (m *MockMovieRepository) SelectMany(arg0 repo.Query, arg1 int) []models.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMany", arg0, arg1)
	ret0, _ := ret[0].([]models.Movie)
	return ret0
}

// SelectMany indicates an expected call of SelectMany.
func (mr *MockMovieRepositoryMockRecorder) SelectMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMany", reflect.TypeOf((*MockMovieRepository)(nil).SelectMany), arg0, arg1)
}
